from UQpy.SampleMethods import RectangularStrata, VoronoiStrata
from UQpy.SampleMethods import RectangularSTS, VoronoiSTS
from UQpy.SampleMethods import RectangularRSS, VoronoiRSS
from UQpy.Distributions import Uniform
from UQpy.Surrogates import Kriging
from UQpy.RunModel import RunModel
import numpy as np
import os
import pytest
import glob
from shutil import rmtree

marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
strata = RectangularStrata(nstrata=[2, 2])
x = RectangularSTS(dist_object=marginals, strata_object=strata, nsamples_per_stratum=1, random_state=1)
y = RectangularRSS(sample_object=x, nsamples=6, n_add=2, random_state=2, verbose=True)

# dir_path = os.path.dirname(os.path.realpath(__file__))
# filepath = os.path.join(dir_path, 'python_model_function.py')
rmodel = RunModel(model_script='python_model_function.py', vec='False', delete_files=True)
K = Kriging(reg_model='Linear', corr_model='Exponential', nopt=20, corr_model_params=[1, 1])
K.fit(samples=x.samples, values=rmodel.qoi_list)
z = RectangularRSS(sample_object=x, runmodel_object=rmodel, krig_object=K, random_state=2, max_train_size=4,
                   verbose=True)
z.run(nsamples=6)

strata_vor = VoronoiStrata(nseeds=4, dimension=2, random_state=10)
x_vor = VoronoiSTS(dist_object=marginals, strata_object=strata_vor, nsamples_per_stratum=1,
                   random_state=strata_vor.random_state)
y_vor = VoronoiRSS(sample_object=x_vor, nsamples=6, n_add=2, verbose=True)

rmodel_ = RunModel(model_script='python_model_function.py', vec='False', delete_files=True)
K_ = Kriging(reg_model='Linear', corr_model='Exponential', nopt=20, corr_model_params=[1, 1])
K_.fit(samples=x_vor.samples, values=rmodel_.qoi_list)
z_vor = VoronoiRSS(sample_object=x_vor, runmodel_object=rmodel_, krig_object=K_, nsamples=6,
                   random_state=x_vor.random_state, max_train_size=4, verbose=True)


dirs = glob.glob('Model_Runs_*')
for dir_ in dirs:
    rmtree(dir_)


def test_rect_rss():
    """
    Test the 6 samples generated by RSS using rectangular stratification
    """
    tmp1 = (np.round(y.samples, 3) == np.array([[0.512, 0.475], [1.144, 0.474], [0.312, 0.712], [1.828, 0.705],
                                                [1.907, 0.046], [0.8, 0.864]])).all()
    tmp2 = (np.round(y.samplesU01, 3) == np.array([[0.256, 0.475], [0.572, 0.474], [0.156, 0.712], [0.914, 0.705],
                                                   [0.954, 0.046], [0.4, 0.864]])).all()
    assert tmp1 and tmp2


def test_rect_gerss():
    """
    Test the 6 samples generated by GE-RSS using rectangular stratification
    """
    tmp1 = (np.round(z.samples, 3) == np.array([[0.512, 0.475], [1.144, 0.474], [0.312, 0.712], [1.828, 0.705],
                                                [0.131, 0.149], [1.907, 0.046]])).all()
    tmp2 = (np.round(z.samplesU01, 3) == np.array([[0.256, 0.475], [0.572, 0.474], [0.156, 0.712], [0.914, 0.705],
                                                   [0.065, 0.149], [0.954, 0.046]])).all()
    assert tmp1 and tmp2


def test_vor_rss():
    """
    Test the 6 samples generated by RSS using voronoi stratification
    """
    tmp1 = (np.round(y_vor.samples, 3) == np.array([[1.563, 0.458], [1.741, 0.048], [0.757, 0.246], [0.396, 0.678],
                                                    [1.166, 0.762], [0.766, 0.508]])).all()
    tmp2 = (np.round(y_vor.samplesU01, 3) == np.array([[0.782, 0.458], [0.87, 0.048], [0.379, 0.246], [0.198, 0.678],
                                                       [0.583, 0.762], [0.383, 0.508]])).all()
    assert tmp1 and tmp2


def test_vor_gerss():
    """
    Test the 6 samples generated by GE-RSS using voronoi stratification
    """
    tmp1 = (np.round(z_vor.samples, 3) == np.array([[1.563, 0.458], [1.741, 0.048], [0.757, 0.246], [0.396, 0.678],
                                                    [1.077, 0.676], [0.503, 0.873]])).all()
    tmp2 = (np.round(z_vor.samplesU01, 3) == np.array([[0.782, 0.458], [0.87, 0.048], [0.379, 0.246], [0.198, 0.678],
                                                       [0.538, 0.676], [0.252, 0.873]])).all()
    assert tmp1 and tmp2


def test_rss_random_state():
    """
        Check 'random_state' is an integer or RandomState object.
    """
    with pytest.raises(TypeError):
        RectangularRSS(sample_object=x, nsamples=6, n_add=2, random_state='abc')


def test_rss_runmodel_object():
    """
        Check 'runmodel_object' should be a UQpy.RunModel class object.
    """
    with pytest.raises(NotImplementedError):
        RectangularRSS(sample_object=x, nsamples=6, n_add=2, runmodel_object='abc')


def test_rss_kriging_object():
    """
        Check 'kriging_object', it should have 'fit' and 'predict' methods.
    """
    with pytest.raises(NotImplementedError):
        RectangularRSS(sample_object=x, nsamples=6, n_add=2, krig_object='abc', runmodel_object=rmodel_)


def test_nsamples():
    """
        Check 'nsamples' attributes, it should be an integer.
    """
    with pytest.raises(NotImplementedError):
        RectangularRSS(sample_object=x, nsamples='a', n_add=2)
