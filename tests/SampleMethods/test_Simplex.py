import numpy as np
import pytest
from UQpy.SampleMethods import Simplex

vertex = np.array([[0, 0], [0.5, 1], [1, 0]])
x = Simplex(nodes=vertex, nsamples=10, random_state=1)

vertex1 = np.array([[0], [1]])
x1 = Simplex(nodes=vertex1, nsamples=3, random_state=2)


# Unit tests
def test_samples_2d():
    """
    Test the 10 samples generated by simplex class.
    """
    tmp = (np.round(x.samples, 3) == np.array([[0.698, 0.035], [0.37 , 0.019], [0.397, 0.322], [0.641, 0.537],
                                               [0.381, 0.721], [0.668, 0.401], [0.513, 0.121], [0.4, 0.301],
                                               [0.257, 0.219], [0.285, 0.333]])).all()
    assert tmp


def test_samples_1d():
    """
    Test the 3 samples generated by simplex class.
    """
    tmp = (np.round(x1.samples, 3) == np.array([[0.262], [0.298], [0.814]])).all()
    assert tmp


def test_dimension():
    """
    Test the number of nodes should be one more than the dimension.
    """
    with pytest.raises(NotImplementedError):
        Simplex(nodes=np.array([[0], [1], [2]]), nsamples=3, random_state=2)


def test_nsamples():
    """
    Test the number of nodes should be one more than the dimension.
    """
    with pytest.raises(NotImplementedError):
        Simplex(nodes=np.array([[0], [1]]), nsamples=-3, random_state=2)


def test_random_state():
    """
        Check 'random_state' is an integer or RandomState object.
    """
    with pytest.raises(TypeError):
        Simplex(nodes=np.array([[0], [1]]), nsamples=1, random_state='abc')

